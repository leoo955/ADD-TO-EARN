
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
               
        

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  username  String?
  points    Int        @default(0)
  sessions  Session[]
  adViews   AdView[]
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Ad {
  id           String   @id @default(uuid())
  title        String
  videoKey     String // cl√© pour S3/CDN
  durationMs   Int
  rewardPoints Int
  adViews      AdView[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AdView {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ad        Ad       @relation(fields: [adId], references: [id])
  adId      String
  token     String   @unique
  watchedMs Int      @default(0)
  rewarded  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  pricePoints Int
  stock       Int
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  totalPoints Int
  status      String   @default("pending") // pending, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  meta      Json
  createdAt DateTime @default(now())
}
